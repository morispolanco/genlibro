import streamlit as st
import requests
import json
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from io import BytesIO

# Set page configuration
st.set_page_config(page_title="Generador de Libros de No Ficci√≥n", page_icon="üìö", layout="wide")

# Function to create the information column
def crear_columna_info():
    st.markdown("""
    ## Sobre esta aplicaci√≥n

    Esta aplicaci√≥n genera una tabla de contenido editable para libros de no ficci√≥n basada en el t√≠tulo, g√©nero y n√∫mero de cap√≠tulos especificados por el usuario.

    ### C√≥mo usar la aplicaci√≥n:

    1. Ingrese el t√≠tulo del libro.
    2. Seleccione el g√©nero de no ficci√≥n.
    3. Especifique el n√∫mero de cap√≠tulos (m√°ximo 24).
    4. Haga clic en "Generar tabla de contenido" para crear la estructura del libro.
    5. Edite los t√≠tulos de los cap√≠tulos si lo desea.
    6. Haga clic en "Generar contenido de cap√≠tulos" para crear el contenido.
    7. Descargue el libro completo en formato DOCX.

    ### Autor y actualizaci√≥n:
    **[Tu Nombre]**, [Fecha actual]

    ### C√≥mo citar esta aplicaci√≥n (formato APA):
    [Tu Apellido], [Inicial del Nombre]. (A√±o). *Generador de Libros de No Ficci√≥n* [Aplicaci√≥n web]. [URL de tu aplicaci√≥n]

    ---
    **Nota:** Esta aplicaci√≥n utiliza inteligencia artificial para generar contenido. Siempre revise y edite el contenido generado para garantizar precisi√≥n y calidad.
    """)

# Titles and Main Column
st.title("Generador de Libros de No Ficci√≥n")

# Create two columns
col1, col2 = st.columns([1, 2])

# Column 1 content
with col1:
    crear_columna_info()

# Column 2 content
with col2:
    TOGETHER_API_KEY = st.secrets["TOGETHER_API_KEY"]

    # G√©neros de no ficci√≥n
    generos_no_ficcion = [
        "Autobiograf√≠a", "Biograf√≠a", "Historia", "Ciencia", "Tecnolog√≠a",
        "Filosof√≠a", "Psicolog√≠a", "Autoayuda", "Negocios", "Econom√≠a",
        "Pol√≠tica", "Sociolog√≠a", "Antropolog√≠a", "Viajes", "Naturaleza",
        "Medio ambiente", "Salud y bienestar", "Cocina", "Arte", "M√∫sica"
    ]

    st.write("Ingrese los detalles del libro:")
    titulo_libro = st.text_input("T√≠tulo del libro:")
    genero = st.selectbox("G√©nero de no ficci√≥n:", generos_no_ficcion)
    num_capitulos = st.number_input("N√∫mero de cap√≠tulos:", min_value=1, max_value=24, value=10)

    def generar_tabla_contenido(titulo, genero, num_capitulos):
        url = "https://api.together.xyz/inference"
        prompt = f"""
        Genera una tabla de contenido para un libro de no ficci√≥n titulado "{titulo}" en el g√©nero de {genero}.
        La tabla de contenido debe tener {num_capitulos} cap√≠tulos.
        Los t√≠tulos de los cap√≠tulos deben ser coherentes, atractivos y relevantes para el tema del libro.
        """
        
        payload = json.dumps({
            "model": "mistralai/Mixtral-8x7B-Instruct-v0.1",
            "prompt": prompt,
            "max_tokens": 1024,
            "temperature": 0.7,
            "top_p": 0.9,
            "top_k": 50,
            "repetition_penalty": 1.1
        })
        headers = {
            'Authorization': f'Bearer {TOGETHER_API_KEY}',
            'Content-Type': 'application/json'
        }
        response = requests.post(url, headers=headers, data=payload)
        return response.json()['output']['choices'][0]['text'].strip()

# Ajuste en el c√≥digo para evitar errores al dividir t√≠tulos de cap√≠tulos
def generar_contenido_capitulo(titulo_libro, genero, titulo_capitulo, numero_capitulo):
    url = "https://api.together.xyz/inference"
    prompt = f"""
    Escribe el contenido detallado para el cap√≠tulo {numero_capitulo} titulado "{titulo_capitulo}" 
    del libro de no ficci√≥n "{titulo_libro}" en el g√©nero de {genero}.
    El contenido debe ser informativo, bien estructurado y relevante para el tema del libro.
    Incluye subt√≠tulos, ejemplos y explicaciones detalladas.
    No repitas el t√≠tulo del cap√≠tulo al inicio del contenido.
    Comienza directamente con el contenido del cap√≠tulo.
    """
    
    payload = json.dumps({
        "model": "mistralai/Mixtral-8x7B-Instruct-v0.1",
        "prompt": prompt,
        "max_tokens": 4096,
        "temperature": 0.7,
        "top_p": 0.9,
        "top_k": 50,
        "repetition_penalty": 1.1
    })
    headers = {
        'Authorization': f'Bearer {TOGETHER_API_KEY}',
        'Content-Type': 'application/json'
    }
    response = requests.post(url, headers=headers, data=payload)
    return response.json()['output']['choices'][0]['text'].strip()

if 'tabla_contenido_editada' in st.session_state:
    if st.button("Generar contenido de cap√≠tulos"):
        with st.spinner("Generando contenido de cap√≠tulos..."):
            contenido_capitulos = []
            for i, titulo_capitulo in enumerate(st.session_state.tabla_contenido_editada):
                # Asegurar que el t√≠tulo del cap√≠tulo tiene el formato esperado
                partes_titulo = titulo_capitulo.split(": ", 1)
                if len(partes_titulo) > 1:
                    contenido = generar_contenido_capitulo(titulo_libro, genero, partes_titulo[1], i+1)
                else:
                    contenido = generar_contenido_capitulo(titulo_libro, genero, partes_titulo[0], i+1)
                contenido_capitulos.append(contenido)
            st.session_state.contenido_capitulos = contenido_capitulos
            st.success("Contenido de cap√≠tulos generado con √©xito.")
