import streamlit as st
import requests
import json
from docx import Document
from io import BytesIO

# Configuraci칩n de la p치gina
st.set_page_config(page_title="Generador de Contenido de Libro", page_icon="游닄", layout="wide")

# Funci칩n para crear la columna de informaci칩n
def crear_columna_info():
    st.markdown("""
    ## Sobre esta aplicaci칩n

    Esta aplicaci칩n genera descripciones detalladas y citas para cap칤tulos de un libro basado en el t칤tulo proporcionado.

    ### C칩mo usar la aplicaci칩n:

    1. Ingrese el t칤tulo del libro.
    2. Seleccione la audiencia (principiantes, conocedores, expertos).
    3. Especifique el n칰mero de cap칤tulos (hasta 15).
    4. Genere los t칤tulos de los cap칤tulos.
    5. Edite los t칤tulos de los cap칤tulos si lo desea.
    6. Genere descripciones y citas para los cap칤tulos.
    7. Genere contenido para un cap칤tulo espec칤fico.
    8. Descargue el documento DOCX con el contenido del libro y las referencias.

    ### Autor:
    **Moris Polanco**, [Fecha actual]

    ---
    **Nota:** Esta es una herramienta de asistencia. Revise y ajuste el contenido seg칰n sea necesario.
    """)

# Columnas principales
st.title("Generador de Contenido de Libro")

col1, col2 = st.columns([1, 2])

with col1:
    crear_columna_info()

with col2:
    TOGETHER_API_KEY = st.secrets["TOGETHER_API_KEY"]
    SERPLY_API_KEY = st.secrets["SERPLY_API_KEY"]

    def generar_capitulos(titulo_libro, num_capitulos, audiencia):
        url = "https://api.together.xyz/inference"
        prompt = (f"Genera {num_capitulos} t칤tulos de cap칤tulos para un libro titulado '{titulo_libro}' "
                  f"dirigido a {audiencia}. Cada t칤tulo debe estar en una l칤nea nueva y ser relevante al tema del libro.")
        payload = json.dumps({
            "model": "meta-llama/Meta-Llama-3-70B-Instruct-Turbo",
            "prompt": prompt,
            "max_tokens": 2048,
            "temperature": 0.7,
            "top_p": 0.7,
            "top_k": 50,
            "repetition_penalty": 1,
        })
        headers = {
            'Authorization': f'Bearer {TOGETHER_API_KEY}',
            'Content-Type': 'application/json'
        }
        response = requests.post(url, headers=headers, data=payload)
        capitulos = response.json()['output']['choices'][0]['text'].strip().split('\n')
        return [capitulo.strip() for capitulo in capitulos if capitulo.strip()]

    def buscar_informacion(query):
        url = f"https://api.serply.io/v1/scholar?q={query}"
        headers = {
            'X-Api-Key': SERPLY_API_KEY,
            'Content-Type': 'application/json',
            'X-Proxy-Location': 'US',
            'X-User-Agent': 'Mozilla/5.0'
        }
        response = requests.get(url, headers=headers)
        return response.json()

    def generar_descripcion_y_citas(titulo_libro, capitulo, audiencia):
        # Generar descripci칩n
        url = "https://api.together.xyz/inference"
        prompt_desc = (f"Escribe una descripci칩n general para el cap칤tulo '{capitulo}' en un libro titulado '{titulo_libro}', "
                       f"dirigido a {audiencia}. La descripci칩n debe ser concisa y adecuada para este p칰blico.")
        payload_desc = json.dumps({
            "model": "mistralai/Mixtral-8x7B-Instruct-v0.1",
            "prompt": prompt_desc,
            "max_tokens": 1024,
            "temperature": 0.7,
            "top_p": 0.7,
            "top_k": 50,
            "repetition_penalty": 1,
        })
        headers = {
            'Authorization': f'Bearer {TOGETHER_API_KEY}',
            'Content-Type': 'application/json'
        }
        response_desc = requests.post(url, headers=headers, data=payload_desc)
        descripcion = response_desc.json()['output']['choices'][0]['text'].strip()

        # Buscar informaci칩n para citas reales
        resultados_busqueda = buscar_informacion(f"{capitulo} {titulo_libro}")
        citas = []
        citas_formateadas = []
        
        for item in resultados_busqueda.get("results", [])[:10]:
            cita = item["snippet"]
            referencia = formatear_referencia_apa(item)
            citas.append(f'"{cita}" - {referencia}')
            citas_formateadas.append(referencia)

        return descripcion, citas, citas_formateadas

    def generar_contenido_capitulo(titulo_libro, capitulo, audiencia, descripcion, citas):
        url = "https://api.together.xyz/inference"
        prompt = (f"Escribe el contenido completo del cap칤tulo '{capitulo}' para el libro titulado '{titulo_libro}', "
                  f"dirigido a {audiencia}, basado en la siguiente descripci칩n y citas. El contenido debe tener al menos 15 p치ginas.\n\n"
                  f"Descripci칩n: {descripcion}\n\nCitas: {', '.join(citas)}\n\nContenido del cap칤tulo:")
        payload = json.dumps({
            "model": "mistralai/Mixtral-8x7B-Instruct-v0.1",
            "prompt": prompt,
            "max_tokens": 4096,
            "temperature": 0.7,
            "top_p": 0.7,
            "top_k": 50,
            "repetition_penalty": 1,
        })
        headers = {
            'Authorization': f'Bearer {TOGETHER_API_KEY}',
            'Content-Type': 'application/json'
        }
        response = requests.post(url, headers=headers, data=payload)
        contenido = response.json()['output']['choices'][0]['text'].strip()
        return contenido

    def create_docx(titulo_libro, capitulos_contenido, referencias):
        doc = Document()
        doc.add_heading(f'{titulo_libro}', 0)

        # Cap칤tulos y contenido
        for i, (capitulo, (descripcion, citas, contenido)) in enumerate(capitulos_contenido.items(), 1):
            doc.add_heading(f'Cap칤tulo {i}: {capitulo}', level=1)
            doc.add_paragraph(descripcion)
            doc.add_heading('Citas', level=2)
            for cita in citas:
                doc.add_paragraph(cita, style='List Bullet')
            doc.add_paragraph(contenido)

        # Referencias
        doc.add_page_break()
        doc.add_heading('Referencias', level=1)
        for referencia in referencias:
            doc.add_paragraph(referencia, style='List Bullet')

        return doc

    def formatear_referencia_apa(item):
        authors = item.get('author', 'Autor desconocido')
        year = item.get('year', 's.f.')
        title = item.get('title', 'T칤tulo desconocido')
        journal = item.get('journal', '')
        volume = item.get('volume', '')
        issue = item.get('issue', '')
        pages = item.get('pages', '')
        url = item.get('url', '')

        reference = f"{authors} ({year}). {title}."
        if journal:
            reference += f" {journal}"
            if volume:
                reference += f", {volume}"
                if issue:
                    reference += f"({issue})"
            if pages:
                reference += f", {pages}"
        reference += f". {url}"
        
        return reference

    # Interfaz de usuario
    titulo_libro = st.text_input("Ingresa el t칤tulo del libro:")
    audiencia = st.selectbox("Selecciona la audiencia del libro:", ["principiantes", "conocedores", "expertos"])
    num_capitulos = st.number_input("N칰mero de cap칤tulos (m치ximo 15):", min_value=1, max_value=15, value=5)

    if st.button("Generar t칤tulos de cap칤tulos"):
        if titulo_libro:
            with st.spinner("Generando t칤tulos de cap칤tulos..."):
                capitulos = generar_capitulos(titulo_libro, num_capitulos, audiencia)
                st.session_state.capitulos = capitulos

    if 'capitulos' in st.session_state:
        st.subheader("Lista de cap칤tulos (editable):")
        capitulos_editados = st.text_area("Edita los t칤tulos de los cap칤tulos aqu칤:", "\n".join(st.session_state.capitulos), height=300)
        st.session_state.capitulos_editados = capitulos_editados.split('\n')

    if 'capitulos_editados' in st.session_state:
        if st.button("Generar descripciones y citas de cap칤tulos"):
            with st.spinner("Generando descripciones y citas..."):
                capitulos_contenido = {}
                todas_referencias = []

                for capitulo in st.session_state.capitulos_editados:
                    descripcion, citas, referencias = generar_descripcion_y_citas(titulo_libro, capitulo, audiencia)
                    capitulos_contenido[capitulo] = (descripcion, citas, None)
                    todas_referencias.extend(referencias)

                st.session_state.capitulos_contenido = capitulos_contenido
                st.session_state.todas_referencias = todas_referencias

        if 'capitulos_contenido' in st.session_state:
            st.subheader("Contenido de los cap칤tulos generados:")

            for capitulo, (descripcion, citas, _) in st.session_state.capitulos_contenido.items():
                st.write(f"**Cap칤tulo: {capitulo}**")
                st.write(f"**Descripci칩n:** {descripcion}")
                st.write(f"**Citas:**")
                for cita in citas:
                    st.write(f"- {cita}")
                st.write("---")

            capitulo_especifico = st.selectbox("Selecciona un cap칤tulo para generar contenido:", st.session_state.capitulos_editados)

            if st.button("Generar contenido para el cap칤tulo seleccionado"):
                with st.spinner("Generando contenido del cap칤tulo..."):
                    descripcion, citas, _ = st.session_state.capitulos_contenido[capitulo_especifico]
                    contenido = generar_contenido_capitulo(titulo_libro, capitulo_especifico, audiencia, descripcion, citas)
                    st.session_state.capitulos_contenido[capitulo_especifico] = (descripcion, citas, contenido)
                    st.success(f"Contenido generado para el cap칤tulo '{capitulo_especifico}'")

            if st.button("Generar y descargar DOCX"):
                with st.spinner("Generando archivo DOCX..."):
                    doc = create_docx(titulo_libro, st.session_state.capitulos_contenido, st.session_state.todas_referencias)
                    buffer = BytesIO()
                    doc.save(buffer)
                    buffer.seek(0)

                    st.download_button(
                        label="Descargar documento",
                        data=buffer,
                        file_name=f"{titulo_libro}.docx",
                        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                    )
